package com.wangyy.erp.erp.public_.仓库.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.wangyy.erp.erp.public_.仓库.仓库;
import com.wangyy.erp.erp.public_.会员.会员;

import java.time.LocalDateTime;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.wangyy.erp.erp.public_.仓库.仓库}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class Generated仓库Impl implements 仓库 {
    
    private int 仓库标识;
    private LocalDateTime 日期;
    private String 详情;
    private String 库位;
    private Integer 会员编码;
    
    protected Generated仓库Impl() {}
    
    @Override
    public int get仓库标识() {
        return 仓库标识;
    }
    
    @Override
    public LocalDateTime get日期() {
        return 日期;
    }
    
    @Override
    public Optional<String> get详情() {
        return Optional.ofNullable(详情);
    }
    
    @Override
    public Optional<String> get库位() {
        return Optional.ofNullable(库位);
    }
    
    @Override
    public OptionalInt get会员编码() {
        return OptionalUtil.ofNullable(会员编码);
    }
    
    @Override
    public 仓库 set仓库标识(int 仓库标识) {
        this.仓库标识 = 仓库标识;
        return this;
    }
    
    @Override
    public 仓库 set日期(LocalDateTime 日期) {
        this.日期 = 日期;
        return this;
    }
    
    @Override
    public 仓库 set详情(String 详情) {
        this.详情 = 详情;
        return this;
    }
    
    @Override
    public 仓库 set库位(String 库位) {
        this.库位 = 库位;
        return this;
    }
    
    @Override
    public 仓库 set会员编码(Integer 会员编码) {
        this.会员编码 = 会员编码;
        return this;
    }
    
    @Override
    public Optional<会员> find会员编码(Manager<会员> foreignManager) {
        if (get会员编码().isPresent()) {
            return foreignManager.stream().filter(会员.会员标识.equal(get会员编码().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("仓库标识 = " + Objects.toString(get仓库标识()));
        sj.add("日期 = "   + Objects.toString(get日期()));
        sj.add("详情 = "   + Objects.toString(OptionalUtil.unwrap(get详情())));
        sj.add("库位 = "   + Objects.toString(OptionalUtil.unwrap(get库位())));
        sj.add("会员编码 = " + Objects.toString(OptionalUtil.unwrap(get会员编码())));
        return "仓库Impl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof 仓库)) { return false; }
        final 仓库 that仓库 = (仓库)that;
        if (this.get仓库标识() != that仓库.get仓库标识()) { return false; }
        if (!Objects.equals(this.get日期(), that仓库.get日期())) { return false; }
        if (!Objects.equals(this.get详情(), that仓库.get详情())) { return false; }
        if (!Objects.equals(this.get库位(), that仓库.get库位())) { return false; }
        if (!Objects.equals(this.get会员编码(), that仓库.get会员编码())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(get仓库标识());
        hash = 31 * hash + Objects.hashCode(get日期());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(get详情()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(get库位()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(get会员编码()));
        return hash;
    }
}