package com.wangyy.erp.erp.public_.销售.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.db.SqlFunction;
import com.wangyy.erp.erp.public_.销售.销售;
import com.wangyy.erp.erp.public_.销售.销售Impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link com.wangyy.erp.erp.public_.销售.销售}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class Generated销售SqlAdapter implements SqlAdapter<销售> {
    
    private final TableIdentifier<销售> tableIdentifier;
    private SqlTypeMapperHelper<Timestamp, LocalDateTime> 创建时间Helper;
    
    protected Generated销售SqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("erp", "public", "销售");
    }
    
    protected 销售 apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .set编号(   resultSet.getInt(1 + offset))
            .set单号(   resultSet.getString(2 + offset))
            .set商品(   resultSet.getString(3 + offset))
            .set票据(   resultSet.getString(4 + offset))
            .set客户(   resultSet.getString(5 + offset))
            .set日期(   resultSet.getString(6 + offset))
            .set创建时间( 创建时间Helper.apply(resultSet.getTimestamp(7 + offset)))
            .set会员编号( resultSet.getInt(8 + offset))
            ;
    }
    
    protected 销售Impl createEntity() {
        return new 销售Impl();
    }
    
    @Override
    public TableIdentifier<销售> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, 销售> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, 销售> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
    
    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        创建时间Helper = SqlTypeMapperHelper.create(project, 销售.创建时间, 销售.class);
    }
}