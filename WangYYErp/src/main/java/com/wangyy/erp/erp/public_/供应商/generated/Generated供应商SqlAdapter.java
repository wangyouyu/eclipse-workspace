package com.wangyy.erp.erp.public_.供应商.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;
import com.wangyy.erp.erp.public_.供应商.供应商;
import com.wangyy.erp.erp.public_.供应商.供应商Impl;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link com.wangyy.erp.erp.public_.供应商.供应商}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class Generated供应商SqlAdapter implements SqlAdapter<供应商> {
    
    private final TableIdentifier<供应商> tableIdentifier;
    
    protected Generated供应商SqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("erp", "public", "供应商");
    }
    
    protected 供应商 apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .set商户详情( resultSet.getString(1 + offset))
            .set会员编号( resultSet.getInt(2 + offset))
            .set商号码(  resultSet.getInt(3 + offset))
            ;
    }
    
    protected 供应商Impl createEntity() {
        return new 供应商Impl();
    }
    
    @Override
    public TableIdentifier<供应商> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, 供应商> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, 供应商> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}