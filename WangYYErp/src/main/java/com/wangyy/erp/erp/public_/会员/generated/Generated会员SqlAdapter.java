package com.wangyy.erp.erp.public_.会员.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.db.SqlFunction;
import com.wangyy.erp.erp.public_.会员.会员;
import com.wangyy.erp.erp.public_.会员.会员Impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link com.wangyy.erp.erp.public_.会员.会员}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class Generated会员SqlAdapter implements SqlAdapter<会员> {
    
    private final TableIdentifier<会员> tableIdentifier;
    private SqlTypeMapperHelper<Timestamp, LocalDateTime> 日期Helper;
    
    protected Generated会员SqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("erp", "public", "会员");
    }
    
    protected 会员 apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .set会员标识( resultSet.getInt(1 + offset))
            .set日期(   日期Helper.apply(resultSet.getTimestamp(2 + offset)))
            .set详情(   resultSet.getString(3 + offset))
            .set付费(   resultSet.getString(4 + offset))
            ;
    }
    
    protected 会员Impl createEntity() {
        return new 会员Impl();
    }
    
    @Override
    public TableIdentifier<会员> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, 会员> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, 会员> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
    
    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        日期Helper = SqlTypeMapperHelper.create(project, 会员.日期, 会员.class);
    }
}