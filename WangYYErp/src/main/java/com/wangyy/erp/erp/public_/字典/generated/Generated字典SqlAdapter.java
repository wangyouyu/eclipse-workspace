package com.wangyy.erp.erp.public_.字典.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;
import com.wangyy.erp.erp.public_.字典.字典;
import com.wangyy.erp.erp.public_.字典.字典Impl;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link com.wangyy.erp.erp.public_.字典.字典}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class Generated字典SqlAdapter implements SqlAdapter<字典> {
    
    private final TableIdentifier<字典> tableIdentifier;
    
    protected Generated字典SqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("erp", "public", "字典");
    }
    
    protected 字典 apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .set类别(  resultSet.getString(1 + offset))
            .set会员(  resultSet.getInt(2 + offset))
            .set字典值( resultSet.getString(3 + offset))
            .set标识号( resultSet.getInt(4 + offset))
            ;
    }
    
    protected 字典Impl createEntity() {
        return new 字典Impl();
    }
    
    @Override
    public TableIdentifier<字典> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, 字典> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, 字典> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}