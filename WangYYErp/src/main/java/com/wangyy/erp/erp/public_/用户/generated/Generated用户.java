package com.wangyy.erp.erp.public_.用户.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.wangyy.erp.erp.public_.会员.会员;
import com.wangyy.erp.erp.public_.用户.用户;

import java.util.Optional;

/**
 * The generated base for the {@link com.wangyy.erp.erp.public_.用户.用户}-interface
 * representing entities of the {@code 用户}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface Generated用户 {
    
    /**
     * This Field corresponds to the {@link 用户} field that can be obtained using
     * the {@link 用户#get账号()} method.
     */
    StringField<用户, String> 账号 = StringField.create(
        Identifier.账号,
        用户::get账号,
        用户::set账号,
        TypeMapper.identity(),
        true
    );
    /**
     * This Field corresponds to the {@link 用户} field that can be obtained using
     * the {@link 用户#get密码()} method.
     */
    StringField<用户, String> 密码 = StringField.create(
        Identifier.密码,
        用户::get密码,
        用户::set密码,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link 用户} field that can be obtained using
     * the {@link 用户#get会员编号()} method.
     */
    IntForeignKeyField<用户, Integer, 会员> 会员编号 = IntForeignKeyField.create(
        Identifier.会员编号,
        用户::get会员编号,
        用户::set会员编号,
        会员.会员标识,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link 用户} field that can be obtained using
     * the {@link 用户#get详情()} method.
     */
    StringField<用户, String> 详情 = StringField.create(
        Identifier.详情,
        o -> OptionalUtil.unwrap(o.get详情()),
        用户::set详情,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the 账号 of this 用户. The 账号 field corresponds to the database
     * column erp.public.用户.账号.
     * 
     * @return the 账号 of this 用户
     */
    String get账号();
    
    /**
     * Returns the 密码 of this 用户. The 密码 field corresponds to the database
     * column erp.public.用户.密码.
     * 
     * @return the 密码 of this 用户
     */
    String get密码();
    
    /**
     * Returns the 会员编号 of this 用户. The 会员编号 field corresponds to the database
     * column erp.public.用户.会员编号.
     * 
     * @return the 会员编号 of this 用户
     */
    int get会员编号();
    
    /**
     * Returns the 详情 of this 用户. The 详情 field corresponds to the database
     * column erp.public.用户.详情.
     * 
     * @return the 详情 of this 用户
     */
    Optional<String> get详情();
    
    /**
     * Sets the 账号 of this 用户. The 账号 field corresponds to the database column
     * erp.public.用户.账号.
     * 
     * @param 账号 to set of this 用户
     * @return   this 用户 instance
     */
    用户 set账号(String 账号);
    
    /**
     * Sets the 密码 of this 用户. The 密码 field corresponds to the database column
     * erp.public.用户.密码.
     * 
     * @param 密码 to set of this 用户
     * @return   this 用户 instance
     */
    用户 set密码(String 密码);
    
    /**
     * Sets the 会员编号 of this 用户. The 会员编号 field corresponds to the database
     * column erp.public.用户.会员编号.
     * 
     * @param 会员编号 to set of this 用户
     * @return     this 用户 instance
     */
    用户 set会员编号(int 会员编号);
    
    /**
     * Sets the 详情 of this 用户. The 详情 field corresponds to the database column
     * erp.public.用户.详情.
     * 
     * @param 详情 to set of this 用户
     * @return   this 用户 instance
     */
    用户 set详情(String 详情);
    
    /**
     * Queries the specified manager for the referenced 会员. If no such 会员
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    会员 find会员编号(Manager<会员> foreignManager);
    
    enum Identifier implements ColumnIdentifier<用户> {
        
        账号   ("账号"),
        密码   ("密码"),
        会员编号 ("会员编号"),
        详情   ("详情");
        
        private final String columnId;
        private final TableIdentifier<用户> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "erp";
        }
        
        @Override
        public String getSchemaId() {
            return "public";
        }
        
        @Override
        public String getTableId() {
            return "用户";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<用户> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}