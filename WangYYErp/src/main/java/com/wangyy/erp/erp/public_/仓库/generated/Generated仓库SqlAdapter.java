package com.wangyy.erp.erp.public_.仓库.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.db.SqlFunction;
import com.wangyy.erp.erp.public_.仓库.仓库;
import com.wangyy.erp.erp.public_.仓库.仓库Impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link com.wangyy.erp.erp.public_.仓库.仓库}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class Generated仓库SqlAdapter implements SqlAdapter<仓库> {
    
    private final TableIdentifier<仓库> tableIdentifier;
    private SqlTypeMapperHelper<Timestamp, LocalDateTime> 日期Helper;
    
    protected Generated仓库SqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("erp", "public", "仓库");
    }
    
    protected 仓库 apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .set仓库标识( resultSet.getInt(1 + offset))
            .set日期(   日期Helper.apply(resultSet.getTimestamp(2 + offset)))
            .set详情(   resultSet.getString(3 + offset))
            .set库位(   resultSet.getString(4 + offset))
            .set会员编码( getInt(resultSet, 5 + offset))
            ;
    }
    
    protected 仓库Impl createEntity() {
        return new 仓库Impl();
    }
    
    @Override
    public TableIdentifier<仓库> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, 仓库> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, 仓库> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
    
    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        日期Helper = SqlTypeMapperHelper.create(project, 仓库.日期, 仓库.class);
    }
}