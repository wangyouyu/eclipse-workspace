package com.wangyy.erp.erp.public_.销售.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.wangyy.erp.erp.public_.会员.会员;
import com.wangyy.erp.erp.public_.销售.销售;

import java.time.LocalDateTime;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.wangyy.erp.erp.public_.销售.销售}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class Generated销售Impl implements 销售 {
    
    private int 编号;
    private String 单号;
    private String 商品;
    private String 票据;
    private String 客户;
    private String 日期;
    private LocalDateTime 创建时间;
    private int 会员编号;
    
    protected Generated销售Impl() {}
    
    @Override
    public int get编号() {
        return 编号;
    }
    
    @Override
    public Optional<String> get单号() {
        return Optional.ofNullable(单号);
    }
    
    @Override
    public String get商品() {
        return 商品;
    }
    
    @Override
    public String get票据() {
        return 票据;
    }
    
    @Override
    public String get客户() {
        return 客户;
    }
    
    @Override
    public String get日期() {
        return 日期;
    }
    
    @Override
    public LocalDateTime get创建时间() {
        return 创建时间;
    }
    
    @Override
    public int get会员编号() {
        return 会员编号;
    }
    
    @Override
    public 销售 set编号(int 编号) {
        this.编号 = 编号;
        return this;
    }
    
    @Override
    public 销售 set单号(String 单号) {
        this.单号 = 单号;
        return this;
    }
    
    @Override
    public 销售 set商品(String 商品) {
        this.商品 = 商品;
        return this;
    }
    
    @Override
    public 销售 set票据(String 票据) {
        this.票据 = 票据;
        return this;
    }
    
    @Override
    public 销售 set客户(String 客户) {
        this.客户 = 客户;
        return this;
    }
    
    @Override
    public 销售 set日期(String 日期) {
        this.日期 = 日期;
        return this;
    }
    
    @Override
    public 销售 set创建时间(LocalDateTime 创建时间) {
        this.创建时间 = 创建时间;
        return this;
    }
    
    @Override
    public 销售 set会员编号(int 会员编号) {
        this.会员编号 = 会员编号;
        return this;
    }
    
    @Override
    public 会员 find会员编号(Manager<会员> foreignManager) {
        return foreignManager.stream().filter(会员.会员标识.equal(get会员编号())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("编号 = "   + Objects.toString(get编号()));
        sj.add("单号 = "   + Objects.toString(OptionalUtil.unwrap(get单号())));
        sj.add("商品 = "   + Objects.toString(get商品()));
        sj.add("票据 = "   + Objects.toString(get票据()));
        sj.add("客户 = "   + Objects.toString(get客户()));
        sj.add("日期 = "   + Objects.toString(get日期()));
        sj.add("创建时间 = " + Objects.toString(get创建时间()));
        sj.add("会员编号 = " + Objects.toString(get会员编号()));
        return "销售Impl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof 销售)) { return false; }
        final 销售 that销售 = (销售)that;
        if (this.get编号() != that销售.get编号()) { return false; }
        if (!Objects.equals(this.get单号(), that销售.get单号())) { return false; }
        if (!Objects.equals(this.get商品(), that销售.get商品())) { return false; }
        if (!Objects.equals(this.get票据(), that销售.get票据())) { return false; }
        if (!Objects.equals(this.get客户(), that销售.get客户())) { return false; }
        if (!Objects.equals(this.get日期(), that销售.get日期())) { return false; }
        if (!Objects.equals(this.get创建时间(), that销售.get创建时间())) { return false; }
        if (this.get会员编号() != that销售.get会员编号()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(get编号());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(get单号()));
        hash = 31 * hash + Objects.hashCode(get商品());
        hash = 31 * hash + Objects.hashCode(get票据());
        hash = 31 * hash + Objects.hashCode(get客户());
        hash = 31 * hash + Objects.hashCode(get日期());
        hash = 31 * hash + Objects.hashCode(get创建时间());
        hash = 31 * hash + Integer.hashCode(get会员编号());
        return hash;
    }
}